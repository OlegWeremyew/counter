{"version":3,"sources":["components/Counter.tsx","components/Button.tsx","components/Buttons.tsx","components/SetInput.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Counter","current","CurrentClassName","Message","className","Button","ButtonCallBack","name","onClick","Buttons","ButtonReset","changeCurrent","MaxValue","startValue","ButtonCurrentClassName","ButtonResetClassName","SetInput","props","type","onChange","setCurrentMaxValueHandler","autoFocus","setCurrentMinValueHandler","setNewCurrentValueHandler","App","newMaxCurrentValue","newMinCurrentValue","useState","setStartValue","setMaxValue","setCurrent","useEffect","currentAsString","localStorage","getItem","newCurrent","JSON","parse","setItem","stringify","e","currentTarget","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oNAkBeA,EAZC,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,QAERC,GAF4C,2BAEZ,IAAZD,EAAD,mBAAuC,SAC1DE,EAAuB,IAAZF,EAAD,UAAqBA,EAArB,iFAAkDA,EAElE,OACI,qBAAKG,UAAWF,EAAhB,SACKC,KCQEE,EAbA,SAAC,GAA6D,IAA5DC,EAA2D,EAA3DA,eAAgBC,EAA2C,EAA3CA,KAAMH,EAAqC,EAArCA,UAAqC,qDAExE,OACI,8BACI,wBAAQA,UAAWA,EACXI,QAASF,EADjB,SAEKC,OCcFE,EAjBC,SAAC,GAAuF,IAAtFC,EAAqF,EAArFA,YAAaC,EAAwE,EAAxEA,cAAeC,EAAyD,EAAzDA,SAAUC,EAA+C,EAA/CA,WAAYZ,EAAmC,EAAnCA,QAE1Da,GAF6F,iFAEnEb,IAAYW,EAAY,mBAAqB,iBACvEG,EAAwBd,GAAWY,EAAa,EAAK,oBAAsB,cAEjF,OACI,sBAAKT,UAAU,UAAf,UACI,cAAC,EAAD,CAAQE,eAAgBK,EAChBP,UAAWU,EACXP,KAAM,2DACd,cAAC,EAAD,CAAQD,eAAgBI,EAChBN,UAAWW,EACXR,KAAM,uCCXbS,EAAW,SAACC,GAKrB,OACI,gCACI,gCACI,gCACI,4CACA,uBAAOC,KAAK,SACLC,SAAUF,EAAMG,0BAEhBC,WAAS,OAEpB,gCACI,8CACA,uBAAOH,KAAK,SACLC,SAAUF,EAAMK,0BAEhBD,WAAS,UAGxB,cAAC,EAAD,CAAQf,eAAgBW,EAAMM,0BACtBnB,UAAW,GACXG,KAAM,yDCsDXiB,MAnFf,WAAgB,IA6BRC,EAOAC,EApCO,EACyBC,mBAAS,GADlC,mBACJd,EADI,KACQe,EADR,OAEqBD,mBAAS,GAF9B,mBAEJf,EAFI,KAEMiB,EAFN,OAGmBF,mBAASd,GAH5B,mBAGJZ,EAHI,KAGK6B,EAHL,KAgDX,OA3CAC,qBAAU,WACN,IAAIC,EAAkBC,aAAaC,QAAQ,gBAC3C,GAAIF,EAAiB,CACjB,IAAIG,EAAaC,KAAKC,MAAML,GAC5BF,EAAWK,MAEhB,IAEHJ,qBAAU,WACNE,aAAaK,QAAQ,eAAgBF,KAAKG,UAAUtC,MACrD,CAACA,IAkCA,gCACI,qBAAKG,UAAU,MAAf,SACI,sBAAKA,UAAU,YAAf,UACI,cAAC,EAAD,CACIH,QAASA,IAEb,cAAC,EAAD,CACIA,QAASA,EACTU,cAxCE,WAClB,GAAIV,EAAUW,EACV,OAAOkB,EAAW7B,EAAU,IAuChBS,YAnCA,WAChBoB,EAAWjB,IAmCKD,SAAUA,EACVC,WAAYA,SAKxB,qBAAKT,UAAU,MAAf,SACI,qBAAKA,UAAU,YAAf,SACI,cAAC,EAAD,CACIE,eAAgB,aAEhBM,SAAUA,EACVC,WAAYA,EACZO,0BA1Cc,SAACoB,GAC/B,IAAKA,EAAEC,cAAcC,OAAS,EAC1B,OAAOjB,GAAsBe,EAAEC,cAAcC,OAyCjCpB,0BApCc,SAACkB,GAC/B,IAAKA,EAAEC,cAAcC,OAAS,EAC1B,OAAOhB,GAAsBc,EAAEC,cAAcC,OAmCjCnB,0BA/Bc,WAC9BM,EAAYJ,GACZG,EAAcF,cCvCPiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAG1BZ,M","file":"static/js/main.748cd356.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype CurrentType = {\r\n    current: number\r\n}\r\n\r\nconst Counter = ({current, ...props}: CurrentType) => {\r\n\r\n    const CurrentClassName = (current === 5) ? `table tableBlock` : \"table\"\r\n    const Message = (current === 5) ? `${current} - это мой предел` : current\r\n\r\n    return (\r\n        <div className={CurrentClassName}>\r\n            {Message}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Counter;","import React from 'react';\r\n\r\ntype ButtonType = {\r\n    ButtonCallBack: () => void\r\n    className: string\r\n    name: string\r\n}\r\n\r\nconst Button = ({ButtonCallBack, name, className, ...props}: ButtonType) => {\r\n\r\n    return (\r\n        <div>\r\n            <button className={className}\r\n                    onClick={ButtonCallBack}>\r\n                {name}\r\n            </button>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from \"./Button\";\r\n\r\ntype ButtonType = {\r\n    ButtonReset: () => void\r\n    changeCurrent: () => void\r\n    current: number\r\n    MaxValue: number\r\n    startValue: number\r\n}\r\n\r\nconst Buttons = ({ButtonReset, changeCurrent, MaxValue, startValue, current, ...props}: ButtonType) => {\r\n\r\n    const ButtonCurrentClassName = (current === MaxValue) ? \"buttonCurrentMax\" : \"buttonCurrent\"\r\n    const ButtonResetClassName = (current >= startValue + 1) ? \"buttonResetActive\" : \"buttonReset\"\r\n\r\n    return (\r\n        <div className=\"current\">\r\n            <Button ButtonCallBack={changeCurrent}\r\n                    className={ButtonCurrentClassName}\r\n                    name={\"Увеличить\"}/>\r\n            <Button ButtonCallBack={ButtonReset}\r\n                    className={ButtonResetClassName}\r\n                    name={\"Сброс\"}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import React, {ChangeEvent} from 'react';\r\nimport Button from \"./Button\";\r\n\r\ntype PropsType = {\r\n    ButtonCallBack: () => void\r\n    MaxValue: number\r\n    startValue: number\r\n    setCurrentMaxValueHandler: (e: ChangeEvent<HTMLInputElement>) => void\r\n    setCurrentMinValueHandler: (e: ChangeEvent<HTMLInputElement>) => void\r\n    setNewCurrentValueHandler: () => void\r\n}\r\n\r\nexport const SetInput = (props: PropsType) => {\r\n\r\n    /*    const ButtonCurrentClassName = props.current === props.MaxValue) ? \"buttonCurrentMax\" : \"buttonCurrent\"\r\n        const ButtonResetClassName = (props.current >= props.startValue + 1) ? \"buttonResetActive\" : \"buttonReset\"*/\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div>\r\n                    <span>MaxValue</span>\r\n                    <input type=\"number\"\r\n                           onChange={props.setCurrentMaxValueHandler}\r\n                           /*value={props.MaxValue}*/\r\n                           autoFocus/>\r\n                </div>\r\n                <div>\r\n                    <span>startValue</span>\r\n                    <input type=\"number\"\r\n                           onChange={props.setCurrentMinValueHandler}\r\n                           /*value={props.startValue}*/\r\n                           autoFocus/>\r\n                </div>\r\n            </div>\r\n            <Button ButtonCallBack={props.setNewCurrentValueHandler}\r\n                    className={\"\"}\r\n                    name={\"Обновить\"}/>\r\n        </div>\r\n    );\r\n};\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport './App.css';\n\nimport Counter from \"./components/Counter\";\nimport Buttons from \"./components/Buttons\";\nimport Button from \"./components/Button\";\nimport {SetInput} from \"./components/SetInput\";\n\nfunction App() {\n    const [startValue, setStartValue] = useState(0)\n    const [MaxValue, setMaxValue] = useState(5)\n    const [current, setCurrent] = useState(startValue)\n\n    useEffect(() => {\n        let currentAsString = localStorage.getItem(\"currentValue\")\n        if (currentAsString) {\n            let newCurrent = JSON.parse(currentAsString)\n            setCurrent(newCurrent)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem(\"currentValue\", JSON.stringify(current))\n    }, [current])\n\n    const changeCurrent = () => {\n        if (current < MaxValue) {\n            return setCurrent(current + 1);\n        }\n    }\n\n    const ButtonReset = () => {\n        setCurrent(startValue)\n    }\n\n\n    //надо исправлять\n    let newMaxCurrentValue: number\n    const setCurrentMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        if (+e.currentTarget.value >= 0) {\n            return newMaxCurrentValue = +e.currentTarget.value\n        }\n    }\n\n    let newMinCurrentValue: number\n    const setCurrentMinValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        if (+e.currentTarget.value >= 0) {\n            return newMinCurrentValue = +e.currentTarget.value\n        }\n    }\n\n    const setNewCurrentValueHandler = () => {\n        setMaxValue(newMaxCurrentValue)\n        setStartValue(newMinCurrentValue)\n    }\n\n    return (\n        <div>\n            <div className=\"App\">\n                <div className=\"conteiner\">\n                    <Counter\n                        current={current}\n                    />\n                    <Buttons\n                        current={current}\n                        changeCurrent={changeCurrent}\n                        ButtonReset={ButtonReset}\n                        MaxValue={MaxValue}\n                        startValue={startValue}\n                    />\n                </div>\n            </div>\n\n            <div className=\"App\">\n                <div className=\"conteiner\">\n                    <SetInput\n                        ButtonCallBack={() => {\n                        }}\n                        MaxValue={MaxValue}\n                        startValue={startValue}\n                        setCurrentMaxValueHandler={setCurrentMaxValueHandler}\n                        setCurrentMinValueHandler={setCurrentMinValueHandler}\n                        setNewCurrentValueHandler={setNewCurrentValueHandler}\n                    />\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}