{"version":3,"sources":["components/Counter.tsx","components/Buttons/Button.tsx","components/Buttons/Buttons.tsx","components/Input/Input.tsx","components/SetInput.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Counter","current","MaxValue","CurrentClassName","Message","className","Button","ButtonCallBack","name","disabled","onClick","Buttons","ButtonReset","changeCurrent","startValue","ButtonCurrentClassName","ButtonResetClassName","Input","props","type","value","onChange","e","onChangeInputHandler","currentTarget","SetInput","error","startingMessage","updateStartValue","updateMaxValue","updateError","App","useState","setStartValue","setMaxValue","setCurrent","setError","useEffect","startValueAsString","localStorage","getItem","MaxValueAsString","currentAsString","JSON","parse","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3527c6b3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype CurrentType = {\r\n    current: number\r\n    MaxValue: number\r\n}\r\n\r\nconst Counter = ({current, MaxValue,...props}: CurrentType) => {\r\n\r\n    const CurrentClassName = (current === MaxValue) ? `table tableBlock` : \"table\"\r\n    const Message = (current === MaxValue) ? `${current} - это мой предел` : current\r\n\r\n    return (\r\n        <div className={CurrentClassName}>\r\n            {Message}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Counter;","import React from 'react';\r\n\r\ntype ButtonType = {\r\n    ButtonCallBack: () => void\r\n    className?: string\r\n    name: string\r\n    disabled?: boolean\r\n}\r\n\r\nconst Button = ({ButtonCallBack, name, className, disabled, ...props}: ButtonType) => {\r\n\r\n    return (\r\n        <div>\r\n            <button className={className}\r\n                    onClick={ButtonCallBack}\r\n                    disabled={disabled}>\r\n                {name}\r\n            </button>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from \"./Button\";\r\n\r\ntype ButtonType = {\r\n    ButtonReset: () => void\r\n    changeCurrent: () => void\r\n    current: number\r\n    MaxValue: number\r\n    startValue: number\r\n}\r\n\r\nconst Buttons = ({ButtonReset, changeCurrent, MaxValue, startValue, current, ...props}: ButtonType) => {\r\n\r\n    const ButtonCurrentClassName = (current === MaxValue) ? \"buttonCurrentMax\" : \"buttonCurrent\"\r\n    const ButtonResetClassName = (current !== startValue) ? \"buttonResetActive\" : \"buttonReset\"\r\n\r\n    return (\r\n        <div className=\"current\">\r\n            <Button ButtonCallBack={changeCurrent}\r\n                    className={ButtonCurrentClassName}\r\n                    name={\"Увеличить\"}/>\r\n            <Button ButtonCallBack={ButtonReset}\r\n                    className={ButtonResetClassName}\r\n                    name={\"Сброс\"}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react';\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype InputPropsType = DefaultInputPropsType &{\r\n    value: number\r\n    onChangeInputHandler: (value: number) => void\r\n    error?: boolean\r\n}\r\n\r\nconst Input = (props: InputPropsType) => {\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChangeInputHandler(+e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n            <input\r\n                className=\"table inputStyle\"\r\n                type=\"number\"\r\n                value={props.value}\r\n                onChange={onChangeHandler}\r\n            />\r\n    );\r\n};\r\n\r\nexport default Input;","import React, {ChangeEvent} from 'react';\r\nimport Button from \"./Buttons/Button\";\r\nimport Input from \"./Input/Input\";\r\n\r\ntype PropsType = {\r\n    MaxValue: number\r\n    startValue: number\r\n    updateStartValue: (value: number) => void\r\n    updateMaxValue: (value: number) => void\r\n    updateError: (error: string) => void\r\n    error: string\r\n    startingMessage: string\r\n}\r\n\r\nexport const SetInput = (props: PropsType) => {\r\n\r\n    const setNewCurrentValueHandler = () => {\r\n        props.updateStartValue(props.startValue)\r\n        props.updateMaxValue(props.MaxValue)\r\n        props.updateError(\"\")\r\n    }\r\n\r\n    const error = props.startValue >= props.MaxValue\r\n    const disabled = !props.error || props.error !== props.startingMessage\r\n\r\n    return (\r\n        <div>\r\n            <div  className=\"inputLabelText\">Начальное значение: <br/>\r\n                <Input value={props.startValue}\r\n                       onChangeInputHandler={props.updateStartValue}\r\n                       error={error}/>\r\n            </div>\r\n            <div className=\"inputLabelText\">Максимальное значение: <br/>\r\n                <Input value={props.MaxValue}\r\n                       onChangeInputHandler={props.updateMaxValue}\r\n                       error={error}/>\r\n            </div>\r\n            <Button ButtonCallBack={setNewCurrentValueHandler}\r\n                    className=\"\"\r\n                    name={\"Обновить\"}\r\n                    disabled={disabled}/>\r\n        </div>\r\n    );\r\n};\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport './App.css';\n\nimport Counter from \"./components/Counter\";\nimport Buttons from \"./components/Buttons/Buttons\";\nimport {SetInput} from \"./components/SetInput\";\n\nfunction App() {\n\n    const startingMessage = 'введите значение и нажмите \"обновить\"';\n\n    const [startValue, setStartValue] = useState<number>(0)\n    const [MaxValue, setMaxValue] = useState<number>(5)\n    const [current, setCurrent] = useState<number>(startValue)\n    const [error, setError] = useState('')\n\n    useEffect(() => {\n        let startValueAsString = localStorage.getItem(\"startValue\")\n        let MaxValueAsString = localStorage.getItem(\"MaxValue\")\n        let currentAsString = localStorage.getItem(\"current\")\n        if (startValueAsString) {\n            setCurrent(JSON.parse(startValueAsString))\n        }\n        MaxValueAsString && setMaxValue(JSON.parse(MaxValueAsString))\n        currentAsString && setCurrent(JSON.parse(currentAsString))\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem(\"startValue\", JSON.stringify(startValue))\n        localStorage.setItem(\"MaxValue\", JSON.stringify(MaxValue))\n        localStorage.setItem(\"current\", JSON.stringify(current))\n    }, [startValue, MaxValue, current])\n\n    const changeCurrent = () => {\n        if (current < MaxValue) {\n            return setCurrent(current + 1);\n        }\n    }\n\n    const ButtonReset = () => {\n        setCurrent(startValue)\n    }\n\n    const updateStartValue = (value: number) => {\n        updateError(startingMessage)\n        if (value >= MaxValue || value < 0) {\n            updateError('Incorrect value')\n        }\n        setStartValue(value)\n        setCurrent(value)\n    }\n\n    const updateMaxValue = (value: number) => {\n        updateError(startingMessage)\n        if (value <= startValue || value < 0) {\n            updateError('Incorrect value')\n        }\n        setMaxValue(value)\n    }\n    const updateError = (error: string) => setError(error)\n\n    return (\n        <div>\n\n            <div className=\"App\">\n                <div className=\"container\">\n                    <Counter\n                        current={current}\n                        MaxValue={MaxValue}\n                    />\n                    <Buttons\n                        current={current}\n                        changeCurrent={changeCurrent}\n                        ButtonReset={ButtonReset}\n                        MaxValue={MaxValue}\n                        startValue={startValue}\n                    />\n                </div>\n            </div>\n\n            <div className=\"App\">\n                <div className=\"container\">\n                    <SetInput\n                        updateStartValue={updateStartValue}\n                        updateMaxValue={updateMaxValue}\n                        updateError={updateError}\n                        MaxValue={MaxValue}\n                        startValue={startValue}\n                        error={error}\n                        startingMessage={startingMessage}\n                    />\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}