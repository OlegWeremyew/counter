{"version":3,"sources":["reportWebVitals.ts","store/changeCounterReducer.ts","AppRedux.tsx","store/store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","value","MaxValue","AppRedux","useSelector","state","changeCount","dispatch","useDispatch","useEffect","valueAsString","localStorage","getItem","type","JSON","parse","onClick","getState","currentValue","setItem","stringify","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"+KAceA,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,sBCNDQ,EAAe,CACxBC,MAAO,EACPC,SAAU,G,OCqCCC,MA9Bf,WAEI,IAAMF,EAAQG,aAAsC,SAAAC,GAAK,OAAIA,EAAMC,YAAYL,SACzEC,EAAWE,aAAsC,SAAAC,GAAK,OAAIA,EAAMC,YAAYJ,YAC5EK,EAAWC,cAiBjB,OAfAC,qBAAU,WACNF,GDgDwC,SAACA,GAC7C,IAAIG,EAAgBC,aAAaC,QAAQ,cACrCF,GAEAH,EAvBG,CACHM,KAAM,+BACNZ,MAoBea,KAAKC,MAAML,UClD3B,IAcC,gCACKT,EACD,wBAAQe,QAdM,WACdf,EAAQC,GACRK,GDgCoB,SAACA,EAAgCU,GAC7D,IAAMC,EAAeD,IAAWX,YAAYL,MAC5CU,aAAaQ,QAAQ,aAAcL,KAAKM,UAAUF,EAAe,IACjEX,EAzBO,CACHM,KAAM,6BCCF,eACA,wBAAQG,QARI,WAChBT,GDgC0B,SAACA,GAC/BI,aAAaQ,QAAQ,aAAcL,KAAKM,UAAU,IAClDb,EAvBO,CACHM,KAAM,oBCLF,uB,cC9BNQ,EAAcC,YAAgB,CAChChB,YFEgC,WAAmF,IAAlFD,EAAiF,uDAAvDL,EAAcuB,EAAyC,uCAClH,OAAQA,EAAOV,MACX,IAAK,uBACD,OAAO,2BAAIR,GAAX,IAAkBJ,MAAOI,EAAMJ,MAAQ,IAE3C,IAAK,cACD,OAAO,2BAAII,GAAX,IAAkBJ,MAAO,IAE7B,IAAK,+BACD,OAAO,2BAAII,GAAX,IAAkBJ,MAAOsB,EAAOtB,QAEpC,QACI,OAAOI,MEXNmB,EAAQC,YAAYJ,EAAaK,YAAgBC,MCI9DC,IAASC,OACL,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACI,cAAC,EAAD,MACSM,SAASC,eAAe,SAIzCxC,M","file":"static/js/main.78bdd70a.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport const initialState = {\r\n    value: 0,\r\n    MaxValue: 5,\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nexport const changeCounterReducer = (state: initialStateType = initialState, action: ActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"CHANGE-CURRENT-VALUE\" : {\r\n            return {...state, value: state.value + 1}\r\n        }\r\n        case \"RESET-VALUE\" : {\r\n            return {...state, value: 0}\r\n        }\r\n        case \"SET_VALUE_FROM_LOCAL_STORAGE\" : {\r\n            return {...state, value: action.value}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionType =\r\n    | ChangeCurrentValueType\r\n    | ResetCurrentValueType\r\n    | setValueFromLocalStorageType\r\n\r\n\r\nexport type ChangeCurrentValueType = ReturnType<typeof changeCurrentValueAC>\r\nexport const changeCurrentValueAC = () => {\r\n    return {\r\n        type: \"CHANGE-CURRENT-VALUE\"\r\n    } as const\r\n}\r\n\r\nexport type ResetCurrentValueType = ReturnType<typeof resetCurrentValueAC>\r\nexport const resetCurrentValueAC = () => {\r\n    return {\r\n        type: \"RESET-VALUE\",\r\n    } as const\r\n}\r\n\r\nexport type setValueFromLocalStorageType = ReturnType<typeof setValueFromLocalStorageAC>\r\nexport const setValueFromLocalStorageAC = (value: number) => {\r\n    return {\r\n        type: \"SET_VALUE_FROM_LOCAL_STORAGE\",\r\n        value\r\n    } as const\r\n}\r\n\r\n//Thunk\r\n\r\nexport const IncValueTC = () => (dispatch: Dispatch<ActionType>, getState: () => AppRootStateType) => {\r\n    const currentValue = getState().changeCount.value\r\n    localStorage.setItem(\"startValue\", JSON.stringify(currentValue + 1))\r\n    dispatch(changeCurrentValueAC())\r\n}\r\n\r\nexport const ResetValueTC = () => (dispatch: Dispatch<ActionType>) => {\r\n    localStorage.setItem(\"startValue\", JSON.stringify(0))\r\n    dispatch(resetCurrentValueAC())\r\n}\r\n\r\nexport const setValueFromLocalStorageTC = () => (dispatch: Dispatch<ActionType>) => {\r\n    let valueAsString = localStorage.getItem(\"startValue\")\r\n    if (valueAsString) {\r\n        let newValue = JSON.parse(valueAsString)\r\n        dispatch(setValueFromLocalStorageAC(newValue))\r\n    }\r\n}\r\n","import React, {useEffect} from 'react';\nimport './App.css';\n\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./store/store\";\nimport {\n    changeCurrentValueAC,\n    IncValueTC,\n    resetCurrentValueAC, ResetValueTC,\n    setValueFromLocalStorageTC\n} from \"./store/changeCounterReducer\";\n\nfunction AppRedux() {\n\n    const value = useSelector<AppRootStateType, number>(state => state.changeCount.value)\n    const MaxValue = useSelector<AppRootStateType, number>(state => state.changeCount.MaxValue)\n    const dispatch = useDispatch()\n\n    useEffect(()=>{\n        dispatch(setValueFromLocalStorageTC())\n    }, [])\n\n    const changeCurrent = () => {\n        if (value < MaxValue) {\n            dispatch(IncValueTC())\n        }\n        return\n    }\n\n    const ButtonReset = () => {\n        dispatch(ResetValueTC())\n    }\n\n    return (\n        <div>\n            {value}\n            <button onClick={changeCurrent}>+</button>\n            <button onClick={ButtonReset}>reset</button>\n        </div>\n    );\n}\n\nexport default AppRedux;\n","\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {changeCounterReducer} from \"./changeCounterReducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    changeCount: changeCounterReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport AppRedux from \"./AppRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\n/*ReactDOM.render(\n    <App />,\n  document.getElementById('root')\n)*/\n;\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppRedux/>\n    </Provider>, document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}